{"version":3,"file":"static/js/874.9e9ee9c3.chunk.js","mappings":"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","sources":["Components/Pages/Detailedreport.js","utils/exportUtils.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useLocation, Link } from \"react-router-dom\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { faDownload, faArrowLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { exportToExcel, exportToPDF, goBack } from \"../../utils/exportUtils\"; // Import the functions\r\n\r\nconst DetailedReport = () => {\r\n  const { loginId } = useParams();\r\n  const location = useLocation();\r\n  const { fromDate, toDate } = location.state || {};\r\n  const [tableData, setTableData] = useState([]);\r\n  const [totalItems, setTotalItems] = useState(0);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const itemsPerPage = 10;\r\n  const [loading, setLoading] = useState(false);\r\n  const totalPages = Math.ceil(totalItems / itemsPerPage);\r\n  const today = new Date();\r\n  const defaultFromDate = fromDate || today;\r\n  const defaultToDate = toDate || today;\r\n  const columns = [\r\n    { dataField: \"id\", text: \"Sr. No.\" },\r\n    { dataField: \"eventType\", text: \"Event Type\" },\r\n    { dataField: \"eventSubtype\", text: \"Event Subtype\" },\r\n    { dataField: \"callDuration\", text: \"Call Duration\" },\r\n    { dataField: \"reviewStatus\", text: \"Review Status\" },\r\n    { dataField: \"callType\", text: \"Call Type\" },\r\n    { dataField: \"complianceScore\", text: \"Compliance of SOP QA Score\" },\r\n    {\r\n      dataField: \"activeListeningScore\",\r\n      text: \"Active Listening & proper response QA Score\",\r\n    },\r\n    {\r\n      dataField: \"detailsCapturingScore\",\r\n      text: \"Correct and relevant details capturing QA Score\",\r\n    },\r\n    {\r\n      dataField: \"addressTaggingScore\",\r\n      text: \"Correct Address tagging QA Score\",\r\n    },\r\n    { dataField: \"callHandledTime\", text: \"Call Handled Time QA time\" },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    fetchData(currentPage, loginId, defaultFromDate, defaultToDate);\r\n  }, [loginId, defaultFromDate, defaultToDate, currentPage]);\r\n\r\n  const apiUrl = `https://jsonplaceholder.typicode.com/todos`;\r\n\r\n  const transformData = (data, page) => {\r\n    return data.map((item, index) => ({\r\n      ...item,\r\n      id: index + 1 + (page - 1) * itemsPerPage,\r\n      eventType: item.title,\r\n      eventSubtype: \"Subtype\" + index,\r\n      callDuration: \"00:0\" + index,\r\n      reviewStatus: item.completed,\r\n      callType: \"Type\",\r\n      complianceScore: item.id,\r\n      activeListeningScore: 85 + index,\r\n      detailsCapturingScore: 90 + index,\r\n      addressTaggingScore: 95 + index,\r\n      callHandledTime: \"00:1\" + index,\r\n    }));\r\n  };\r\n\r\n  const fetchData = async (page, loginId, defaultFromDate, defaultToDate) => {\r\n    try {\r\n      const response = await fetch(\r\n        `${apiUrl}?userId=${loginId}&fromDate=${encodeURIComponent(\r\n          defaultFromDate\r\n        )}&toDate=${encodeURIComponent(defaultToDate)}`\r\n      );\r\n      const data = await response.json();\r\n      const transformedData = transformData(data, page);\r\n      const slicedData = transformedData.slice(\r\n        (page - 1) * itemsPerPage,\r\n        page * itemsPerPage\r\n      );\r\n      setTableData(slicedData);\r\n      setTotalItems(transformedData.length); // Set the total count based on all items fetched\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n    }\r\n  };\r\n\r\n  const handleExport = async (type) => {\r\n    const dataUrl = `${apiUrl}?userId=${loginId}&fromDate=${encodeURIComponent(\r\n      defaultFromDate\r\n    )}&toDate=${encodeURIComponent(defaultToDate)}`;\r\n    console.log(dataUrl);\r\n    try {\r\n      setLoading(true);\r\n      console.log(\"Export data URL:\", dataUrl);\r\n      console.log(\"Columns for export:\", columns);\r\n      if (type === \"pdf\") {\r\n        await exportToPDF(dataUrl, columns, \"Detailed_report.pdf\");\r\n      } else if (type === \"excel\") {\r\n        await exportToExcel(dataUrl, columns, \"Detailed_report.xlsx\");\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error exporting ${type}:`, error);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const formatDate = (dateString) => {\r\n    const dateObj = new Date(dateString);\r\n    const options = { month: \"long\", day: \"numeric\", year: \"numeric\" };\r\n    return dateObj.toLocaleDateString(\"en-GB\", options);\r\n  };\r\n\r\n  return (\r\n    <div className=\"main_content_iner overly_inner mt-5\">\r\n      <div className=\"container-fluid p-0\">\r\n        <div className=\"row\">\r\n          <div className=\"col-12\">\r\n            <div className=\"page_title_box d-flex align-items-center justify-content-between\">\r\n              <div className=\"page_title_left\">\r\n                <h3 className=\"f_s_30 f_w_700 text_white\">\r\n                  SCO Detail Report\r\n                </h3>\r\n                <ol className=\"breadcrumb page_bradcam mb-0\">\r\n                  <li className=\"breadcrumb-item\">\r\n                    <Link to=\"/dashboard\">Performance Report</Link>\r\n                  </li>\r\n                  <li className=\"breadcrumb-item active\">\r\n                    <Link to=\"#\">SCO Performance Report</Link>\r\n                  </li>\r\n                  <li className=\"breadcrumb-item active\">\r\n                    <Link to=\"#\">SCO Detailed Report</Link>\r\n                  </li>\r\n                </ol>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col-lg-12 col-md-12 col-sm-12 card_height_100\">\r\n            <div className=\"white_card mb_20\">\r\n              <div className=\"row mb-3 justify-content-end mr-5\">\r\n                <div className=\"col-lg-6 col-md-6 col-sm-6 mt-4 ml-5 mt-5\">\r\n                  <h3>\r\n                    <b>\r\n                      SCO-{loginId} Details Report from{\" \"}\r\n                      {formatDate(defaultFromDate)} -{\" \"}\r\n                      {formatDate(defaultToDate)}\r\n                    </b>\r\n                  </h3>\r\n                </div>\r\n                <div className=\"col-lg-3 col-md-6 col-sm-6 mt-4 ml-auto\">\r\n                  <button\r\n                    className=\"btn btn-primary mt-3\"\r\n                    data-toggle=\"tooltip\"\r\n                    data-placement=\"top\"\r\n                    title=\"Back to Previous Page\"\r\n                    onClick={goBack}\r\n                  >\r\n                    {\" \"}\r\n                    <FontAwesomeIcon icon={faArrowLeft} />{\" \"}\r\n                  </button>{\" \"}\r\n                  &ensp;\r\n                  <button\r\n                    className=\"btn mt-3\"\r\n                    style={{\r\n                      backgroundColor: \"#e91e63\",\r\n                      color: \"#fff\",\r\n                      width: \"30%\",\r\n                    }}\r\n                    onClick={() => handleExport(\"pdf\")}\r\n                    disabled={loading}\r\n                  >\r\n                    {loading ? (\r\n                      <>\r\n                        <span\r\n                          className=\"spinner-border spinner-border-sm\"\r\n                          role=\"status\"\r\n                          aria-hidden=\"true\"\r\n                        ></span>\r\n                        Loading...\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <FontAwesomeIcon icon={faDownload} /> PDF\r\n                      </>\r\n                    )}\r\n                  </button>{\" \"}\r\n                  &ensp;\r\n                  <button\r\n                    className=\"btn mt-3\"\r\n                    style={{\r\n                      backgroundColor: \"#1e88e5\",\r\n                      color: \"#fff\",\r\n                      width: \"30%\",\r\n                    }}\r\n                    variant=\"success\"\r\n                    onClick={() => handleExport(\"excel\")}\r\n                    disabled={loading}\r\n                  >\r\n                    {loading ? (\r\n                      <>\r\n                        <span\r\n                          className=\"spinner-border spinner-border-sm\"\r\n                          role=\"status\"\r\n                          aria-hidden=\"true\"\r\n                        ></span>\r\n                        Loading...\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <FontAwesomeIcon icon={faDownload} /> Excel\r\n                      </>\r\n                    )}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"table-responsive ml-5\">\r\n                <BootstrapTable\r\n                  keyField=\"id\"\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  striped\r\n                  hover\r\n                  condensed\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n     \r\n        <div className=\"row\">\r\n      <div className=\"col-12\">\r\n        <ul id=\"page-numbers\" className=\"justify-content-end pagination mr-5\">\r\n          {/* Previous Button */}\r\n          <li\r\n            className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}\r\n            onClick={() => {\r\n              if (currentPage > 1) setCurrentPage(currentPage - 1);\r\n            }}\r\n          >\r\n            <span>&laquo;</span>\r\n          </li>\r\n\r\n          {/* Page Numbers */}\r\n          {Array.from({ length: totalPages }, (_, index) => {\r\n            // Calculate range to display only 5 pages at a time\r\n            const startPage = currentPage <= 3 ? 0 : currentPage - 3;\r\n            const endPage = startPage + 5 >= totalPages ? totalPages : startPage + 5;\r\n\r\n            if (index >= startPage && index < endPage) {\r\n              return (\r\n                <li\r\n                  key={index + 1}\r\n                  className={`page-item ${index + 1 === currentPage ? 'active' : ''}`}\r\n                  onClick={() => setCurrentPage(index + 1)}\r\n                >\r\n                  <span>{index + 1}</span>\r\n                </li>\r\n              );\r\n            }\r\n            return null;\r\n          })}\r\n\r\n          {/* Next Button */}\r\n          <li\r\n            className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}\r\n            onClick={() => {\r\n              if (currentPage < totalPages) setCurrentPage(currentPage + 1);\r\n            }}\r\n          >\r\n            <span>&raquo;</span>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DetailedReport;\r\n","import axios from \"axios\";\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport Swal from \"sweetalert2\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\n// Generic function to transform data\r\nconst transformData = (data, columns) => {\r\n  if (!Array.isArray(data)) {\r\n    Swal.fire({\r\n        icon: \"error\",\r\n        title: \"Data Not Found\",\r\n        text: \"There was an error to find the data. Please try again.\"\r\n    });\r\n    return [];\r\n  }\r\n  if (!Array.isArray(columns)) {\r\n    //console.error('Columns is not an array:', columns);\r\n    Swal.fire({\r\n        icon: \"error\",\r\n        title: \"Something Went Wrong\",\r\n        text: \"There was an error. Please try again.\"\r\n    });\r\n\r\n    return [];\r\n  }\r\n  return data.map(item => {\r\n    const transformedItem = {};\r\n    columns.forEach(col => {\r\n      transformedItem[col.dataField] = item[col.dataField] || \"\"; // Default to empty string if data is missing\r\n    });\r\n    return transformedItem;\r\n  });\r\n};\r\n\r\nexport const exportToExcel = async (dataUrl, columns, filename = 'data.xlsx') => {\r\n  try {\r\n    const response = await axios.get(dataUrl);\r\n    const transformedData = transformData(response.data, columns);\r\n\r\n    const worksheet = XLSX.utils.json_to_sheet(transformedData, { header: columns.map(col => col.dataField) });\r\n    const workbook = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(workbook, worksheet, \"Sheet1\");\r\n\r\n    // Generate Excel file and create a Blob\r\n    const excelBlob = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\r\n    const blob = new Blob([excelBlob], { type: \"application/octet-stream\" });\r\n\r\n    // Create a link element\r\n    const link = document.createElement(\"a\");\r\n    link.href = URL.createObjectURL(blob);\r\n    link.download = filename;\r\n\r\n    // Append the link element to the DOM\r\n    document.body.appendChild(link);\r\n\r\n    // Programmatically click the link to trigger the download\r\n    link.click();\r\n\r\n    // Clean up and remove the link element\r\n    document.body.removeChild(link);\r\n  } catch (error) {\r\n    Swal.fire({\r\n        icon: \"error\",\r\n        title: \"Not Exporting\",\r\n        text: \"Error exporting Excel. Please try again.\"\r\n    });\r\n  }\r\n};\r\n\r\nexport const exportToPDF = async (dataUrl, columns, filename = 'data.pdf') => {\r\n  try {\r\n    const response = await axios.get(dataUrl);\r\n    // console.log('Data fetched from API:', response.data);\r\n    // console.log('Columns:', columns);\r\n    const transformedData = transformData(response.data, columns);\r\n\r\n    const doc = new jsPDF();\r\n    \r\n    // Prepare table data and headers\r\n    const columnHeaders = columns.map(col => col.text);\r\n    const tableData = transformedData.map(row => columns.map(col => row[col.dataField]));\r\n\r\n    // Add autoTable with headers and data\r\n    doc.autoTable({\r\n      head: [columnHeaders],\r\n      body: tableData,\r\n    });\r\n\r\n    doc.save(filename);\r\n  } catch (error) {\r\n    \r\n  }\r\n};\r\n\r\nexport const goBack = () => {\r\n  window.history.back();\r\n};\r\n"],"names":["DetailedReport","loginId","useParams","location","useLocation","fromDate","toDate","state","tableData","setTableData","useState","totalItems","setTotalItems","currentPage","setCurrentPage","loading","setLoading","totalPages","Math","ceil","today","Date","defaultFromDate","defaultToDate","columns","dataField","text","useEffect","fetchData","apiUrl","async","page","response","fetch","concat","encodeURIComponent","transformedData","transformData","data","map","item","index","id","eventType","title","eventSubtype","callDuration","reviewStatus","completed","callType","complianceScore","activeListeningScore","detailsCapturingScore","addressTaggingScore","callHandledTime","json","slicedData","slice","length","error","console","handleExport","dataUrl","log","type","exportToPDF","exportToExcel","formatDate","dateString","toLocaleDateString","month","day","year","_jsx","className","children","_jsxs","Link","to","onClick","goBack","FontAwesomeIcon","icon","faArrowLeft","style","backgroundColor","color","width","disabled","_Fragment","role","faDownload","variant","BootstrapTable","keyField","striped","hover","condensed","Array","from","_","startPage","isArray","transformedItem","forEach","col","Swal","filename","arguments","undefined","axios","get","worksheet","XLSX","json_to_sheet","header","workbook","book_new","book_append_sheet","excelBlob","bookType","blob","Blob","link","document","createElement","href","URL","createObjectURL","download","body","appendChild","click","removeChild","doc","jsPDF","columnHeaders","row","autoTable","head","save","window","history","back"],"sourceRoot":""}